version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: mortgage-ai-postgres
    environment:
      POSTGRES_DB: mortgage_db
      POSTGRES_USER: mortgage_user
      POSTGRES_PASSWORD: mortgage_pass
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./schema.sql:/docker-entrypoint-initdb.d/01-schema.sql
    ports:
      - "${DB_PORT:-5432}:5432"
    networks:
      - mortgage-ai-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U mortgage_user -d mortgage_db"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: mortgage-ai-redis
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    ports:
      - "${REDIS_PORT:-6379}:6379"
    networks:
      - mortgage-ai-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Backend API Service
  backend:
    build:
      context: .
      dockerfile: docker/backend.Dockerfile
    container_name: mortgage-ai-backend
    environment:
      - NODE_ENV=${NODE_ENV:-production}
      - REQUIRE_AUTH=${REQUIRE_AUTH:-false}
      - DATABASE_URL=postgresql://mortgage_user:mortgage_pass@postgres:5432/mortgage_db
      - REDIS_URL=redis://redis:6379
      - ANTHROPIC_API_KEY=${ANTHROPIC_API_KEY}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - JWT_SECRET=${JWT_SECRET}
    volumes:
      - ./backend:/app/backend
      - ./uploads:/app/uploads
      - ./logs:/app/logs
    ports:
      - "${PORT:-3000}:3000"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - mortgage-ai-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Frontend Service
  frontend:
    build:
      context: .
      dockerfile: docker/frontend.Dockerfile
    container_name: mortgage-ai-frontend
    environment:
      - REACT_APP_API_URL=http://localhost:3000/api
      - REACT_APP_REQUIRE_AUTH=${REQUIRE_AUTH:-false}
    ports:
      - "${FRONTEND_PORT:-3001}:3000"
    depends_on:
      - backend
    networks:
      - mortgage-ai-network
    restart: unless-stopped

  # Nginx Reverse Proxy with automatic port conflict resolution
  nginx:
    build:
      context: .
      dockerfile: docker/nginx.Dockerfile
    container_name: mortgage-ai-nginx
    ports:
      - "${NGINX_PORT:-80}:80"
      - "${NGINX_SSL_PORT:-443}:443"
    depends_on:
      - backend
      - frontend
    networks:
      - mortgage-ai-network
    restart: unless-stopped
    volumes:
      - ./docker/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./docker/nginx/ssl:/etc/nginx/ssl:ro
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Python AI Agents Service
  ai-agents:
    build:
      context: .
      dockerfile: docker/ai-agents.Dockerfile
    container_name: mortgage-ai-agents
    environment:
      - ANTHROPIC_API_KEY=${ANTHROPIC_API_KEY}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - DATABASE_URL=postgresql://mortgage_user:mortgage_pass@postgres:5432/mortgage_db
      - REDIS_URL=redis://redis:6379
      # OpenCV headless environment variables
      - DISPLAY=:0
      - QT_X11_NO_MITSHM=1
      - OPENCV_LOG_LEVEL=ERROR
    env_file: .env
    volumes:
      - ./backend/agents:/app/agents
      - ./models:/app/models
    ports:
      - "${AGENTS_PORT:-8000}:8000"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - mortgage-ai-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

volumes:
  postgres_data:
  redis_data:

networks:
  mortgage-ai-network:
    driver: bridge
